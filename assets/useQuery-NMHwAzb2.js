import{r as l,o as E,p as h,q as S,t as f,v as i,w as R,x as g,Q as b}from"./index-RkuXT1ne.js";const C=(e,t)=>{(e.suspense||e.useErrorBoundary)&&(t.isReset()||(e.retryOnMount=!1))},m=e=>{l.useEffect(()=>{e.clearReset()},[e])},v=({result:e,errorResetBoundary:t,useErrorBoundary:o,query:s})=>e.isError&&!t.isReset()&&!e.isFetching&&E(o,[e.error,s]),Q=e=>{e.suspense&&typeof e.staleTime!="number"&&(e.staleTime=1e3)},d=(e,t)=>e.isLoading&&e.isFetching&&!t,p=(e,t,o)=>(e==null?void 0:e.suspense)&&d(t,o),B=(e,t,o)=>t.fetchOptimistic(e).then(({data:s})=>{e.onSuccess==null||e.onSuccess(s),e.onSettled==null||e.onSettled(s,null)}).catch(s=>{o.clearReset(),e.onError==null||e.onError(s),e.onSettled==null||e.onSettled(void 0,s)});function w(e,t){const o=h({context:e.context}),s=S(),c=f(),r=o.defaultQueryOptions(e);r._optimisticResults=s?"isRestoring":"optimistic",r.onError&&(r.onError=i.batchCalls(r.onError)),r.onSuccess&&(r.onSuccess=i.batchCalls(r.onSuccess)),r.onSettled&&(r.onSettled=i.batchCalls(r.onSettled)),Q(r),C(r,c),m(c);const[n]=l.useState(()=>new t(o,r)),u=n.getOptimisticResult(r);if(R(l.useCallback(a=>{const y=s?()=>{}:n.subscribe(i.batchCalls(a));return n.updateResult(),y},[n,s]),()=>n.getCurrentResult(),()=>n.getCurrentResult()),l.useEffect(()=>{n.setOptions(r,{listeners:!1})},[r,n]),p(r,u,s))throw B(r,n,c);if(v({result:u,errorResetBoundary:c,useErrorBoundary:r.useErrorBoundary,query:n.getCurrentQuery()}))throw u.error;return r.notifyOnChangeProps?u:n.trackResult(u)}function T(e,t,o){const s=g(e,t,o);return w(s,b)}export{T as u};
